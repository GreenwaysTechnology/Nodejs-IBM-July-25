....................................................................................
			  IO apis
....................................................................................
1.file system io
   file system io , how to read data from disk file
2.network io

File System IO:
=>We can read and write files from the disk in  two ways
  1.blocking way
  2.nonblocking way
=>We can read and write files using two mode
  1.NonStreaming mode
  2.Streaming mode
=>All file operations are handled by
  "Worker Threads" from Worker Thread Pool - either it is blocking or non blocking    io.
=>Files are handled using callback style or promise style.
=>Files operations are handled by "fs" module

......................................................................................................................................................................................................................................
											 File system operations
.....................................................................................................................................................................................................................................

1.create,read,write,update,delete,rename files and directories

Two styles:

1.callback style
	 require('node:fs')
2.promise style
        require('node:fs/promises')

Async                                            Sync
fs.readFile                                  fs.readFileSync
fs.writeFile                                  fs.writeFileSync
fs.appendFile                             fs.appendFileSync
fs.unlink                                      fs.unlinkSync   -- delete file
etc...

Async Read and Write:

How to read File using nonblocking pattern? using callbacks

fs.readFile(path[, options], callback)

path <string> | <Buffer> | <URL> | <integer> filename or file descriptor
options <Object> | <string>
 encoding <string> | <null> Default: null
 flag <string> See support of file system flags. Default: 'r'.
 signal <AbortSignal> allows aborting an in-progress readFile

callback <Function>
  err <Error> | <AggregateError>
  data <string> | <Buffer>

const fs = require('node:fs')

function blockMe(message) {
    console.log(message)
}

function main() {
    blockMe('start')
    const filePath = './src/assets/info.txt'
    const options = {
        encoding: 'UTF-8'
    }
    fs.readFile(filePath, options, (err, data) => {
        if (err) throw err
        console.log(data)
    })
    blockMe('end')
}
main()
***********************************************************************************************************************************************************
											Create/Write a File
***********************************************************************************************************************************************************

const fs = require('node:fs')
function createNewFile() {
    const filePath = './src/assets/demo.txt'
    const content = 'This is sample demo'
    fs.writeFile(filePath, content, (err) => {
        if (err) throw err
        console.log(`File "${filePath}" created`)
    })
}
function main() {
    createNewFile()
}
main()
*********************************************************************************************************************************************************
										 File append

Use case: Custom Logger in node that writes log messages to a file using api

fs.writeFile
fs.appendFile

You can log
info
Errors
Timestamps

const fs = require('node:fs')
const logFile = './app.log'
function logMessage(level, message) {
    const timeStamp = new Date().toISOString()
    const fullMessage = `[${timeStamp}] [${level.toUpperCase()}] ${message} \n`
    //append file
    fs.appendFile(logFile, fullMessage, (err) => {
        if (err) {
            console.log(`X Failed to write log`, err)
        }
    })
}
function info(msg) {
    logMessage('info', msg)
}
function error(msg) {
    logMessage('error', msg)
}
function warn(msg) {
    logMessage('warn', msg)
}
function main() {
    info('Web Server started on Port 3000')
    info('Database Server started on Port 1434')
    error('Unable to Start Message Broker')
    warn('High Memory Usage has been detected')
}
main()
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									 File System Operations Using Promises
****************************************************************************************************************************************************
fs.readFile, fs.writeFile,fs.appendFile are callback based apis

How to convert these apis into promise?

1.Using custom promises - you convert the callback apis into promises
2.Using node:fs/promises package


Custom Promise:
const fs = require('node:fs')

//callback based
// function readTextFile() {
//     const filePath = './src/assets/info.txt'
//     const options = {
//         encoding: 'UTF-8'
//     }
//     fs.readFile(filePath, options, (err, data) => {
//         if (err) throw err
//         console.log(data)
//     })
// }

async function getValue(){
    return 10 // Promise.resolve(10)
}
async function readTextFile() {
    return new Promise((resolve, reject) => {
        const filePath = './src/assets/info.txt'
        const options = {
            encoding: 'UTF-8'
        }
        fs.readFile(filePath, options, (err, data) => {
            if (err) {
                reject(err)
            } else {
                resolve(data)
            }
        })
    })
}

async function main() {
    //  readTextFile().then(data=>console.log(data)).catch(err=>console.log(err))
    try {
        const data = await readTextFile()
        console.log(data)
    }
    catch (err) {
        console.log(err)
    }
}
main()
******************
Promise Apis:
......................
const fs = require('node:fs/promises')

async function readTextFile() {
    const filePath = './src/assets/info.txt'
    const options = {
        encoding: 'UTF-8'
    }
    // fs.readFile(filePath, options)
    //     .then(data => console.log(data))
    //     .catch(err => console.log(err))
    try {
        const data = await fs.readFile(filePath, options)
        console.log(data)
    }
    catch (err) {
        console.log(Error)
    }
}

function main() {
    readTextFile()
}
main()



